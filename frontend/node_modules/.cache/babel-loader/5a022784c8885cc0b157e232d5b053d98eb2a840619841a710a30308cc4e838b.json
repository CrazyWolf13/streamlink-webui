{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport StyledButton from './StyledButton.vue';\nimport axios from \"axios\";\nexport default {\n  components: {\n    StyledButton\n  },\n  data() {\n    return {\n      currentView: \"start\",\n      // Default view\n      startData: {\n        name: \"\",\n        quality: \"audio_only\",\n        customPath: \"\",\n        blockAds: false\n      },\n      useDefaultFilename: true,\n      includeDate: false,\n      runningStreams: [],\n      // Raw stream IDs from /api/stream_list\n      detailedStreams: [],\n      // Detailed data from /api/stream_info\n      streamsLoading: false // Loading state for the Running Streams view\n    };\n  },\n  methods: {\n    async startStream() {\n      const payload = {\n        ...this.startData,\n        customPath: this.useDefaultFilename ? null : this.includeDate ? `${this.startData.customPath}_DATE` : this.startData.customPath\n      };\n      try {\n        const response = await axios.post(\"/api/start\", payload);\n        alert(`Stream started: ${response.data.message}`);\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to start the stream.\");\n      }\n    },\n    async terminateStream(stream_id) {\n      const confirmation = window.confirm(\"Are you sure you want to terminate this stream?\");\n      if (confirmation) {\n        try {\n          const response = await axios.post(`/api/stop?stream_id=${stream_id}`);\n          alert(`Stream terminated: ${response.data.message}`);\n          this.fetchRunningStreams(); // Refresh the list after termination\n        } catch (error) {\n          console.error(error);\n          alert(\"Failed to terminate the stream.\");\n        }\n      }\n    },\n    async confirmTerminateAllStreams() {\n      const confirmation = window.confirm(\"Are you sure you want to terminate all streams?\");\n      if (confirmation) {\n        this.terminateAllStreams();\n      }\n    },\n    async terminateAllStreams() {\n      try {\n        const response = await axios.post(\"/api/stop_all\");\n        alert(`All streams terminated: ${response.data.message}`);\n        this.fetchRunningStreams(); // Refresh the list after termination\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to terminate all streams.\");\n      }\n    },\n    async fetchRunningStreams() {\n      this.streamsLoading = true; // Show loading state\n      try {\n        // Fetch the list of running streams\n        const listResponse = await axios.get(\"/api/stream_list\");\n        const streamIds = listResponse.data.running_streams;\n\n        // Fetch details for each stream ID\n        const detailsPromises = streamIds.map(id => axios.get(`/api/stream_info?stream_id=${id}`));\n        const detailsResponses = await Promise.all(detailsPromises);\n\n        // Extract detailed stream information\n        this.detailedStreams = detailsResponses.map(res => res.data);\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to fetch running streams.\");\n      } finally {\n        this.streamsLoading = false; // Hide loading state\n      }\n    },\n    handleRunningStreamsClick() {\n      this.currentView = 'list';\n      this.fetchRunningStreams();\n    },\n    async cleanup() {\n      try {\n        const response = await axios.get(\"/api/cleanup\");\n        alert(response.data.result);\n      } catch (error) {\n        console.error(error);\n        alert(\"Cleanup failed.\");\n      }\n    },\n    formatRunningTime(minutes) {\n      const totalSeconds = minutes * 60;\n      const wholeMinutes = Math.floor(totalSeconds / 60);\n      const remainingSeconds = Math.round(totalSeconds % 60);\n      return `${wholeMinutes}m ${remainingSeconds}s`;\n    }\n  }\n};","map":{"version":3,"names":["StyledButton","axios","components","data","currentView","startData","name","quality","customPath","blockAds","useDefaultFilename","includeDate","runningStreams","detailedStreams","streamsLoading","methods","startStream","payload","response","post","alert","message","error","console","terminateStream","stream_id","confirmation","window","confirm","fetchRunningStreams","confirmTerminateAllStreams","terminateAllStreams","listResponse","get","streamIds","running_streams","detailsPromises","map","id","detailsResponses","Promise","all","res","handleRunningStreamsClick","cleanup","result","formatRunningTime","minutes","totalSeconds","wholeMinutes","Math","floor","remainingSeconds","round"],"sources":["G:\\Informatik\\Projekte\\streamlink_web-ui\\frontend\\src\\components\\StreamlinkUi.vue"],"sourcesContent":["<template>\r\n    <div id=\"app\">\r\n      <div class=\"container\">\r\n        <!-- Sidebar -->\r\n        <aside class=\"sidebar\">\r\n          <ul>\r\n            <li :class=\"{ active: currentView === 'start' }\" @click=\"currentView = 'start'\">Start Stream</li>\r\n            <li :class=\"{ active: currentView === 'list' }\" @click=\"handleRunningStreamsClick\">Running Streams</li>\r\n            <li :class=\"{ active: currentView === 'cleanup' }\" @click=\"currentView = 'cleanup'\">Cleanup</li>\r\n          </ul>\r\n        </aside>\r\n  \r\n        <!-- Main Content -->\r\n        <main class=\"content\">\r\n          <!-- Start Stream -->\r\n          <div v-if=\"currentView === 'start'\">\r\n            <h2>Start a Stream</h2>\r\n            <div class=\"form-group\">\r\n              <label>Channel Name:</label>\r\n              <input v-model=\"startData.name\" placeholder=\"Enter Channel Name\" />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Quality:</label>\r\n              <select v-model=\"startData.quality\">\r\n                <option value=\"audio_only\">Audio Only</option>\r\n                <option value=\"best\">Best</option>\r\n                <option value=\"720p\">720p</option>\r\n                <option value=\"480p\">480p</option>\r\n                <option value=\"360p\">360p</option>\r\n                <option value=\"160p\">160p</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Filename:</label>\r\n              <input type=\"checkbox\" v-model=\"useDefaultFilename\" />\r\n              Use default filename\r\n              <div v-if=\"!useDefaultFilename\" class=\"conditional-options\">\r\n                <input type=\"checkbox\" v-model=\"includeDate\" />\r\n                Include date in filename\r\n                <input v-model=\"startData.customPath\" placeholder=\"Enter custom filename or path\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <input type=\"checkbox\" v-model=\"startData.blockAds\" />\r\n              Block ads\r\n            </div>\r\n            <StyledButton :clickHandler=\"startStream\">Start</StyledButton>\r\n          </div>\r\n  \r\n          <!-- Running Streams -->\r\n          <div v-if=\"currentView === 'list'\">\r\n            <h2>Running Streams</h2>\r\n            <StyledButton :clickHandler=\"fetchRunningStreams\" class=\"refresh-btn\">Refresh</StyledButton>\r\n            <div v-if=\"streamsLoading\">Loading streams...</div>\r\n            <div v-else>\r\n              <div class=\"streams-container\">\r\n                <div v-for=\"stream in detailedStreams\" :key=\"stream.stream_id\" class=\"stream-box\">\r\n                  <h3>{{ stream.name }}</h3>\r\n                  <p><strong>Stream ID:</strong> {{ stream.stream_id }}</p>\r\n                  <p>\r\n                    <strong>URL:</strong>\r\n                    <a :href=\"stream.url\" target=\"_blank\">{{ stream.url }}</a>\r\n                  </p>\r\n                  <p><strong>Quality:</strong> {{ stream.quality }}</p>\r\n                  <p><strong>Running Since:</strong> {{ formatRunningTime(stream.running_since) }}</p>\r\n                  <p><strong>Filename:</strong> {{ stream.filename }}</p>\r\n                  <p><strong>Output Directory:</strong> {{ stream.output_dir }}</p>\r\n                  <p><strong>Block Ads:</strong> {{ stream.block_ads ? \"Yes\" : \"No\" }}</p>\r\n                  <p><strong>Status:</strong> {{ stream.running ? \"Running\" : \"Stopped\" }}</p>\r\n                  <button @click=\"terminateStream(stream.stream_id)\" class=\"terminate-btn\" title=\"Terminate\">\r\n                    <i class=\"fa fa-trash\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <button @click=\"confirmTerminateAllStreams\" class=\"terminate-all-btn\" title=\"Terminate All\">\r\n            <i class=\"fas fa-trash\"></i>\r\n          </button>\r\n          </div>\r\n  \r\n          <!-- Cleanup -->\r\n          <div v-if=\"currentView === 'cleanup'\">\r\n            <h2>Cleanup</h2>\r\n            <StyledButton :clickHandler=\"cleanup\">Cleanup DB and Logs</StyledButton>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n\r\n  import StyledButton from './StyledButton.vue';\r\n  import axios from \"axios\";\r\n  \r\n  export default {\r\n    components: { StyledButton },\r\n    data() {\r\n      return {\r\n        currentView: \"start\", // Default view\r\n        startData: {\r\n          name: \"\",\r\n          quality: \"audio_only\",\r\n          customPath: \"\",\r\n          blockAds: false,\r\n        },\r\n        useDefaultFilename: true,\r\n        includeDate: false,\r\n        runningStreams: [], // Raw stream IDs from /api/stream_list\r\n        detailedStreams: [], // Detailed data from /api/stream_info\r\n        streamsLoading: false, // Loading state for the Running Streams view\r\n      };\r\n    },\r\n    methods: {\r\n      async startStream() {\r\n        const payload = {\r\n          ...this.startData,\r\n          customPath: this.useDefaultFilename\r\n            ? null\r\n            : this.includeDate\r\n            ? `${this.startData.customPath}_DATE`\r\n            : this.startData.customPath,\r\n        };\r\n        try {\r\n          const response = await axios.post(\"/api/start\", payload);\r\n          alert(`Stream started: ${response.data.message}`);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to start the stream.\");\r\n        }\r\n      },\r\n      async terminateStream(stream_id) {\r\n        const confirmation = window.confirm(\"Are you sure you want to terminate this stream?\");\r\n        if (confirmation) {\r\n          try {\r\n            const response = await axios.post(`/api/stop?stream_id=${stream_id}`);\r\n            alert(`Stream terminated: ${response.data.message}`);\r\n            this.fetchRunningStreams(); // Refresh the list after termination\r\n          } catch (error) {\r\n            console.error(error);\r\n            alert(\"Failed to terminate the stream.\");\r\n          }\r\n        }\r\n      },\r\n      async confirmTerminateAllStreams() {\r\n        const confirmation = window.confirm(\"Are you sure you want to terminate all streams?\");\r\n        if (confirmation) {\r\n          this.terminateAllStreams();\r\n        }\r\n      },\r\n      async terminateAllStreams() {\r\n        try {\r\n          const response = await axios.post(\"/api/stop_all\");\r\n          alert(`All streams terminated: ${response.data.message}`);\r\n          this.fetchRunningStreams(); // Refresh the list after termination\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to terminate all streams.\");\r\n        }\r\n      },\r\n      async fetchRunningStreams() {\r\n        this.streamsLoading = true; // Show loading state\r\n        try {\r\n          // Fetch the list of running streams\r\n          const listResponse = await axios.get(\"/api/stream_list\");\r\n          const streamIds = listResponse.data.running_streams;\r\n  \r\n          // Fetch details for each stream ID\r\n          const detailsPromises = streamIds.map((id) =>\r\n            axios.get(`/api/stream_info?stream_id=${id}`)\r\n          );\r\n  \r\n          const detailsResponses = await Promise.all(detailsPromises);\r\n  \r\n          // Extract detailed stream information\r\n          this.detailedStreams = detailsResponses.map((res) => res.data);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to fetch running streams.\");\r\n        } finally {\r\n          this.streamsLoading = false; // Hide loading state\r\n        }\r\n      },\r\n        handleRunningStreamsClick() {\r\n        this.currentView = 'list';\r\n        this.fetchRunningStreams();\r\n        },\r\n      async cleanup() {\r\n        try {\r\n          const response = await axios.get(\"/api/cleanup\");\r\n          alert(response.data.result);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Cleanup failed.\");\r\n        }\r\n      },\r\n      formatRunningTime(minutes) {\r\n        const totalSeconds = minutes * 60;\r\n        const wholeMinutes = Math.floor(totalSeconds / 60);\r\n        const remainingSeconds = Math.round(totalSeconds % 60);\r\n        return `${wholeMinutes}m ${remainingSeconds}s`;\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Colors */\r\n  :root {\r\n    --twitch-purple: #9146ff;\r\n    --dark-grey: #2d2d2d;\r\n    --light-grey: #393939;\r\n    --white: #ffffff;\r\n    --hover-grey: #4d4d4d;\r\n    --dark-background: #212121;\r\n    --font-color: #ababab;\r\n  }\r\n\r\n  body {\r\n    background-color: var(--dark-background);\r\n  }\r\n  \r\n  /* Overall Layout */\r\n  .container {\r\n    display: flex;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .sidebar {\r\n    background-color: var(--dark-grey);\r\n    color: var(--white);\r\n    padding: 15px;\r\n    width: 200px;\r\n  }\r\n  \r\n  .sidebar ul {\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .sidebar li {\r\n    cursor: pointer;\r\n    margin: 10px 0;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    transition: background-color 0.3s ease;\r\n  }\r\n  \r\n  .sidebar li:hover {\r\n    background-color: var(--hover-grey);\r\n  }\r\n  \r\n  .sidebar li.active {\r\n    background-color: var(--twitch-purple);\r\n    color: var(--white);\r\n  }\r\n  \r\n  .content {\r\n    background-color: var(--light-grey);\r\n    color: var(--font-color);\r\n    flex-grow: 1;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  /* Form Styles */\r\n  .form-group {\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  input,\r\n  select {\r\n    width: 100%;\r\n    padding: 8px;\r\n    margin-top: 5px;\r\n    background-color: #333;\r\n    border: none;\r\n    color: var(--font-color);\r\n    border-radius: 5px;\r\n  }\r\n  \r\n  /* Stream Boxes */\r\n  .stream-box {\r\n    background-color: var(--dark-grey);\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    margin-bottom: 20px;\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    background-color: #333;\r\n    position: relative;\r\n  }\r\n  \r\n  .stream-box h3 {\r\n    margin-top: 0;\r\n  }\r\n  \r\n  .stream-box p {\r\n    margin: 5px 0;\r\n  }\r\n  \r\n  .streams-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));\r\n    gap: 20px;\r\n  }\r\n  \r\n  button {\r\n    width: auto;\r\n    padding: 8px 16px;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  button i {\r\n    font-size: 18px;\r\n  }\r\n\r\n  /* Button Styles */\r\n.terminate-btn {\r\n  background-color: transparent;\r\n  color: #d9534f;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.terminate-btn:hover {\r\n  color: red;\r\n}\r\n\r\n.terminate-btn:hover::after {\r\n  position: absolute;\r\n  top: -25px;\r\n  right: 0;\r\n  background-color: var(--dark-grey);\r\n  color: var(--white);\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n}\r\n/* Terminate All Button */\r\n.terminate-all-btn {\r\n  background-color: #d9534f;\r\n  color: var(--dark-background);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: auto;\r\n  transition: background-color 0.3s ease;\r\n  position: fixed;\r\n  bottom: 10px;\r\n  right: 10px;\r\n}\r\n\r\n.terminate-all-btn:hover {\r\n  background-color: red;\r\n}\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}