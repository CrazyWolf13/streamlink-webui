{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, vModelCheckbox as _vModelCheckbox, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = {\n  class: \"sidebar\"\n};\nconst _hoisted_4 = {\n  class: \"content\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  class: \"form-group\"\n};\nconst _hoisted_7 = {\n  class: \"form-group\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"avatar-container\"\n};\nconst _hoisted_9 = [\"src\"];\nconst _hoisted_10 = {\n  class: \"form-group\"\n};\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\nconst _hoisted_12 = {\n  class: \"form-group\"\n};\nconst _hoisted_13 = {\n  class: \"form-group\"\n};\nconst _hoisted_14 = {\n  key: 1\n};\nconst _hoisted_15 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StyledButton = _resolveComponent(\"StyledButton\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Sidebar \"), _createElementVNode(\"aside\", _hoisted_3, [_createElementVNode(\"ul\", null, [_createElementVNode(\"li\", {\n    class: _normalizeClass({\n      active: $data.currentView === 'start'\n    }),\n    onClick: _cache[0] || (_cache[0] = $event => $data.currentView = 'start')\n  }, \"Start Stream\", 2 /* CLASS */), _createElementVNode(\"li\", {\n    class: _normalizeClass({\n      active: $data.currentView === 'list'\n    }),\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.handleRunningStreamsClick && $options.handleRunningStreamsClick(...args))\n  }, \"Running Streams\", 2 /* CLASS */), _createElementVNode(\"li\", {\n    class: _normalizeClass({\n      active: $data.currentView === 'cleanup'\n    }),\n    onClick: _cache[2] || (_cache[2] = $event => $data.currentView = 'cleanup')\n  }, \"Cleanup\", 2 /* CLASS */)])]), _createCommentVNode(\" Main Content \"), _createElementVNode(\"main\", _hoisted_4, [_createCommentVNode(\" Start Stream \"), $data.currentView === 'start' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[17] || (_cache[17] = _createElementVNode(\"h2\", null, \"Start a Stream\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", null, \"Channel Name:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.startData.name = $event),\n    placeholder: \"Enter Channel Name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.startData.name]])]), _createCommentVNode(\" New Section: Fetch Live Status \"), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_StyledButton, {\n    clickHandler: $options.fetchLiveStatus,\n    class: \"small-button\"\n  }, {\n    default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\"Check Live Status\")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"clickHandler\"])]), $data.avatarUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"img\", {\n    src: $data.avatarUrl,\n    alt: \"Profile Image\",\n    class: \"profile-image-small\"\n  }, null, 8 /* PROPS */, _hoisted_9), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"status-indicator\", {\n      'status-online': $data.isUserLive,\n      'status-offline': !$data.isUserLive\n    }])\n  }, null, 2 /* CLASS */)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_10, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", null, \"Quality:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.startData.quality = $event)\n  }, _cache[10] || (_cache[10] = [_createStaticVNode(\"<option value=\\\"audio_only\\\" data-v-d2673e44>Audio Only</option><option value=\\\"best\\\" data-v-d2673e44>Best</option><option value=\\\"720p\\\" data-v-d2673e44>720p</option><option value=\\\"480p\\\" data-v-d2673e44>480p</option><option value=\\\"360p\\\" data-v-d2673e44>360p</option><option value=\\\"160p\\\" data-v-d2673e44>160p</option>\", 6)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.startData.quality]])]), _createElementVNode(\"div\", _hoisted_11, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", null, \"Filename:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.startData.append_time = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.startData.append_time]]), _cache[13] || (_cache[13] = _createTextVNode(\" Append datetime to filename \"))]), _createElementVNode(\"div\", _hoisted_12, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.startData.block_ads = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.startData.block_ads]]), _cache[14] || (_cache[14] = _createTextVNode(\" Block ads \"))]), _createElementVNode(\"div\", _hoisted_13, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.startData.schedule = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.startData.schedule]]), _cache[15] || (_cache[15] = _createTextVNode(\" Schedule \"))]), _createVNode(_component_StyledButton, {\n    clickHandler: $options.startStream\n  }, {\n    default: _withCtx(() => _cache[16] || (_cache[16] = [_createTextVNode(\"Start\")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"clickHandler\"])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Running Streams \"), $data.currentView === 'list' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_createCommentVNode(\" ... (Existing code for Running Streams) \")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Cleanup \"), $data.currentView === 'cleanup' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_cache[19] || (_cache[19] = _createElementVNode(\"h2\", null, \"Cleanup\", -1 /* HOISTED */)), _createVNode(_component_StyledButton, {\n    clickHandler: $options.cleanup\n  }, {\n    default: _withCtx(() => _cache[18] || (_cache[18] = [_createTextVNode(\"Cleanup DB and Logs\")])),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"clickHandler\"])])) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["id","class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_normalizeClass","active","$data","currentView","onClick","_cache","$event","args","$options","handleRunningStreamsClick","_hoisted_4","_hoisted_5","_hoisted_6","startData","name","placeholder","_hoisted_7","_createVNode","_component_StyledButton","clickHandler","fetchLiveStatus","default","_withCtx","_createTextVNode","_","avatarUrl","_hoisted_8","src","alt","_hoisted_9","isUserLive","_hoisted_10","quality","_createStaticVNode","_hoisted_11","type","append_time","_hoisted_12","block_ads","_hoisted_13","schedule","startStream","_hoisted_14","_hoisted_15","cleanup"],"sources":["G:\\Informatik\\Projekte\\streamlink_web-ui\\frontend\\src\\components\\StreamlinkUi.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <div class=\"container\">\r\n      <!-- Sidebar -->\r\n      <aside class=\"sidebar\">\r\n        <ul>\r\n          <li :class=\"{ active: currentView === 'start' }\" @click=\"currentView = 'start'\">Start Stream</li>\r\n          <li :class=\"{ active: currentView === 'list' }\" @click=\"handleRunningStreamsClick\">Running Streams</li>\r\n          <li :class=\"{ active: currentView === 'cleanup' }\" @click=\"currentView = 'cleanup'\">Cleanup</li>\r\n        </ul>\r\n      </aside>\r\n\r\n      <!-- Main Content -->\r\n      <main class=\"content\">\r\n        <!-- Start Stream -->\r\n        <div v-if=\"currentView === 'start'\">\r\n          <h2>Start a Stream</h2>\r\n          <div class=\"form-group\">\r\n            <label>Channel Name:</label>\r\n            <input v-model=\"startData.name\" placeholder=\"Enter Channel Name\" />\r\n          </div>\r\n          <!-- New Section: Fetch Live Status -->\r\n          <div class=\"form-group\">\r\n            <StyledButton :clickHandler=\"fetchLiveStatus\" class=\"small-button\">Check Live Status</StyledButton>\r\n          </div>\r\n          <div class=\"avatar-container\" v-if=\"avatarUrl\">\r\n            <img :src=\"avatarUrl\" alt=\"Profile Image\" class=\"profile-image-small\" />\r\n            <div class=\"status-indicator\" :class=\"{ 'status-online': isUserLive, 'status-offline': !isUserLive }\"></div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Quality:</label>\r\n            <select v-model=\"startData.quality\">\r\n              <option value=\"audio_only\">Audio Only</option>\r\n              <option value=\"best\">Best</option>\r\n              <option value=\"720p\">720p</option>\r\n              <option value=\"480p\">480p</option>\r\n              <option value=\"360p\">360p</option>\r\n              <option value=\"160p\">160p</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Filename:</label>\r\n            <input type=\"checkbox\" v-model=\"startData.append_time\" />\r\n            Append datetime to filename\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input type=\"checkbox\" v-model=\"startData.block_ads\" />\r\n            Block ads\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input type=\"checkbox\" v-model=\"startData.schedule\" />\r\n            Schedule\r\n          </div>\r\n          <StyledButton :clickHandler=\"startStream\">Start</StyledButton>\r\n        </div>\r\n\r\n        <!-- Running Streams -->\r\n        <div v-if=\"currentView === 'list'\">\r\n          <!-- ... (Existing code for Running Streams) -->\r\n        </div>\r\n\r\n        <!-- Cleanup -->\r\n        <div v-if=\"currentView === 'cleanup'\">\r\n          <h2>Cleanup</h2>\r\n          <StyledButton :clickHandler=\"cleanup\">Cleanup DB and Logs</StyledButton>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport StyledButton from './StyledButton.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: { StyledButton },\r\n  data() {\r\n    return {\r\n      currentView: 'start', // Default view\r\n      startData: {\r\n        name: '',\r\n        quality: 'best',\r\n        block_ads: true,\r\n        append_time: true,\r\n        schedule: false,\r\n      },\r\n      liveStatusUsername: '', // Input for checking live status\r\n      avatarUrl: null, // URL of the user's avatar\r\n      isUserLive: false, // User live status\r\n      runningStreams: [], // Raw stream IDs from /api/stream_list\r\n      detailedStreams: [], // Detailed data from /api/stream_info\r\n      scheduledStreams: [], // Detailed data for scheduled streams\r\n      streamsLoading: false, // Loading state for the Running Streams view\r\n    };\r\n  },\r\n  methods: {\r\n    async startStream() {\r\n      const payload = {\r\n        name: this.startData.name || '',\r\n        quality: this.startData.quality || 'best',\r\n        block_ads: !!this.startData.block_ads,\r\n        append_time: !!this.startData.append_time, \r\n        schedule: !!this.startData.schedule,\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post('/api/start', payload);\r\n        alert(`Stream started: ${response.data.message}`);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to start the stream.');\r\n      }\r\n    },\r\n\r\n    async fetchLiveStatus() {\r\n      if (!this.startData.name.trim()) {\r\n        alert('Please enter a username.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const [liveStatusResponse, avatarResponse] = await Promise.all([\r\n          axios.get(`/api/get_live_status?username=${this.startData.name}`),\r\n          axios.get(`/api/get_avatar?username=${this.startData.name}`)\r\n        ]);\r\n\r\n        this.isUserLive = liveStatusResponse.data.is_live;\r\n        this.avatarUrl = avatarResponse.data.profile_image_url;\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to fetch live status or avatar.');\r\n      }\r\n    },\r\n\r\n    async terminateStream(stream_id) {\r\n      const confirmation = window.confirm('Are you sure you want to terminate this stream?');\r\n      if (confirmation) {\r\n        try {\r\n          const response = await axios.post(`/api/stop?stream_id=${stream_id}`);\r\n          alert(`Stream terminated: ${response.data.message}`);\r\n          this.fetchRunningStreams(); // Refresh the list after termination\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert('Failed to terminate the stream.');\r\n        }\r\n      }\r\n    },\r\n    async confirmTerminateAllStreams() {\r\n      const confirmation = window.confirm('Are you sure you want to terminate all streams?');\r\n      if (confirmation) {\r\n        this.terminateAllStreams();\r\n      }\r\n    },\r\n    async terminateAllStreams() {\r\n      try {\r\n        const response = await axios.post('/api/stop_all');\r\n        alert(`All streams terminated: ${response.data.message}`);\r\n        this.fetchRunningStreams(); // Refresh the list after termination\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to terminate all streams.');\r\n      }\r\n    },\r\n    async fetchRunningStreams() {\r\n      this.streamsLoading = true; // Show loading state\r\n      try {\r\n        // Fetch the list of running and scheduled streams\r\n        const listResponse = await axios.get('/api/stream_list');\r\n        const runningStreamIds = listResponse.data.running_streams;\r\n        const scheduledStreamIds = listResponse.data.scheduled_streams;\r\n\r\n        // Fetch details for each running stream ID\r\n        const runningDetailsPromises = runningStreamIds.map((id) =>\r\n          axios.get(`/api/stream_info?stream_id=${id}`)\r\n        );\r\n\r\n        const runningDetailsResponses = await Promise.all(runningDetailsPromises);\r\n\r\n        // Extract detailed running stream information\r\n        this.detailedStreams = await Promise.all(\r\n          runningDetailsResponses.map(async (res) => {\r\n            const stream = res.data;\r\n            const avatarResponse = await axios.get(`/api/get_avatar?username=${stream.name}`);\r\n            stream.profile_image_url = avatarResponse.data.profile_image_url;\r\n            return stream;\r\n          })\r\n        );\r\n\r\n        // Fetch details for each scheduled stream ID\r\n        const scheduledDetailsPromises = scheduledStreamIds.map((id) =>\r\n          axios.get(`/api/stream_info?stream_id=${id}`)\r\n        );\r\n\r\n        const scheduledDetailsResponses = await Promise.all(scheduledDetailsPromises);\r\n\r\n        // Extract detailed scheduled stream information\r\n        this.scheduledStreams = await Promise.all(\r\n          scheduledDetailsResponses.map(async (res) => {\r\n            const stream = res.data;\r\n            const avatarResponse = await axios.get(`/api/get_avatar?username=${stream.name}`);\r\n            stream.profile_image_url = avatarResponse.data.profile_image_url;\r\n            return stream;\r\n          })\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to fetch running streams.');\r\n      } finally {\r\n        this.streamsLoading = false; // Hide loading state\r\n      }\r\n    },\r\n    handleRunningStreamsClick() {\r\n      this.currentView = 'list';\r\n      this.fetchRunningStreams();\r\n    },\r\n    async cleanup() {\r\n      try {\r\n        const response = await axios.get('/api/cleanup');\r\n        alert(response.data.result);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Cleanup failed.');\r\n      }\r\n    },\r\n    formatRunningTime(minutes) {\r\n      const totalSeconds = minutes * 60;\r\n      const hours = Math.floor(minutes / 60);\r\n      const remainingMinutes = Math.floor(minutes % 60);\r\n      const remainingSeconds = Math.round(totalSeconds % 60);\r\n\r\n      if (hours > 0) {\r\n        return `${hours}h ${remainingMinutes}m ${remainingSeconds}s`;\r\n      } else {\r\n        return `${remainingMinutes}m ${remainingSeconds}s`;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Colors */\r\n:root {\r\n  --twitch-purple: #9146ff;\r\n  --dark-grey: #2d2d2d;\r\n  --light-grey: #393939;\r\n  --white: #ffffff;\r\n  --hover-grey: #4d4d4d;\r\n  --dark-background: #212121;\r\n  --font-color: #ababab;\r\n}\r\n\r\nbody {\r\n  background-color: var(--dark-background);\r\n}\r\n\r\n/* Overall Layout */\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.sidebar {\r\n  background-color: var(--dark-grey);\r\n  color: var(--white);\r\n  padding: 15px;\r\n  width: 200px;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar li {\r\n  cursor: pointer;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.sidebar li:hover {\r\n  background-color: var(--hover-grey);\r\n}\r\n\r\n.sidebar li.active {\r\n  background-color: var(--twitch-purple);\r\n  color: var(--white);\r\n}\r\n\r\n.content {\r\n  background-color: var(--light-grey);\r\n  color: var(--font-color);\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n\r\n  /* Ensure the content can scroll vertically when needed */\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column; /* Stack children vertically */\r\n  height: calc(100vh - 40px); /* Ensure it fits within viewport */\r\n}\r\n\r\n/* Form Styles */\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\ninput,\r\nselect {\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin-top: 5px;\r\n  background-color: #333;\r\n  border: none;\r\n  color: var(--font-color);\r\n  border-radius: 5px;\r\n}\r\n\r\n/* Stream Boxes */\r\n.stream-box {\r\n  background-color: var(--dark-grey);\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  margin-top: 10px;\r\n  display: flex;\r\n  align-items: center; \r\n  gap: 20px;\r\n  background-color: #333;\r\n  position: relative;\r\n}\r\n\r\n.stream-box .stream-info {\r\n  flex-grow: 1;\r\n}\r\n\r\n.stream-box h3 {\r\n  margin-top: 0;\r\n}\r\n\r\n.stream-box p {\r\n  margin: 5px 0;\r\n}\r\n\r\n.stream-box .profile-image-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 150px;\r\n}\r\n\r\n.stream-box img.profile-image {\r\n  width: 140px;\r\n  height: 140px;\r\n  border-radius: 50%;\r\n  margin-right: 10vw;\r\n  transition: transform 0.2s ease-in-out; \r\n}\r\n\r\n.stream-box img.profile-image:hover {\r\n  transform: scale(1.1); \r\n}\r\n\r\n.stream-box .scheduled-icon-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 10vw;\r\n}\r\n\r\n.stream-box .scheduled-icon {\r\n  font-size: 2.5vw;\r\n  color: var(--twitch-purple);\r\n  transition: transform 0.2s ease-in-out;\r\n}\r\n\r\n.stream-box .scheduled-icon:hover {\r\n  transform: scale(1.1); \r\n}\r\n\r\n.stream-box .scheduled-icon-container.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n.streams-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));\r\n  gap: 20px;\r\n\r\n  /* Ensure grid scales properly */\r\n  flex-grow: 1; \r\n  overflow-y: auto; /* Enable vertical scroll if the grid overflows */\r\n  max-height: calc(100vh - 140px); /* Adjust for header/buttons */\r\n}\r\n\r\nbutton {\r\n  width: auto;\r\n  padding: 8px 16px;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n/* Button Styles */\r\n.terminate-btn {\r\n  background-color: transparent;\r\n  color: #d9534f;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.terminate-btn:hover {\r\n  color: red;\r\n}\r\n\r\n.terminate-btn:hover::after {\r\n  position: absolute;\r\n  top: -25px;\r\n  right: 0;\r\n  background-color: var(--dark-grey);\r\n  color: var(--white);\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n}\r\n/* Terminate All Button */\r\n.terminate-all-btn {\r\n  background-color: #d9534f;\r\n  color: var(--white);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: auto;\r\n  transition: background-color 0.3s ease;\r\n  position: fixed;\r\n  bottom: 10px;\r\n  right: 10px;\r\n}\r\n\r\n.terminate-all-btn:hover {\r\n  background-color: red;\r\n}\r\n\r\n/* Smaller Button */\r\n.small-button {\r\n  width: 3vw;\r\n}\r\n\r\n/* Avatar Container */\r\n.avatar-container {\r\n  position: relative;\r\n  display: inline-block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.profile-image-small {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  border: 2px solid var(--white);\r\n}\r\n\r\n/* Status Indicator */\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  border: 2px solid var(--dark-grey);\r\n}\r\n\r\n.status-online {\r\n  background-color: #4caf50; /* Green for online */\r\n}\r\n\r\n.status-offline {\r\n  background-color: #d9534f; /* Red for offline */\r\n}\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}