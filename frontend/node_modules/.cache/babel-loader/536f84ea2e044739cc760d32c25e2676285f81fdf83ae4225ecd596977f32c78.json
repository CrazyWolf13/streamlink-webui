{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport StyledButton from './StyledButton.vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    StyledButton\n  },\n  data() {\n    return {\n      currentView: 'start',\n      // Default view\n      startData: {\n        name: '',\n        quality: 'best',\n        block_ads: true,\n        append_time: true,\n        schedule: false\n      },\n      liveStatusUsername: '',\n      // Input for checking live status\n      avatarUrl: null,\n      // URL of the user's avatar\n      isUserLive: false,\n      // User live status\n      runningStreams: [],\n      // Raw stream IDs from /api/stream_list\n      detailedStreams: [],\n      // Detailed data from /api/stream_info\n      scheduledStreams: [],\n      // Detailed data for scheduled streams\n      streamsLoading: false // Loading state for the Running Streams view\n    };\n  },\n  methods: {\n    async startStream() {\n      const payload = {\n        name: this.startData.name || '',\n        quality: this.startData.quality || 'best',\n        block_ads: !!this.startData.block_ads,\n        append_time: !!this.startData.append_time,\n        schedule: !!this.startData.schedule\n      };\n      try {\n        const response = await axios.post('/api/start', payload);\n        alert(`Stream started: ${response.data.message}`);\n      } catch (error) {\n        console.error(error);\n        alert('Failed to start the stream.');\n      }\n    },\n    async fetchLiveStatus() {\n      if (!this.startData.name.trim()) {\n        alert('Please enter a username.');\n        return;\n      }\n      try {\n        const [liveStatusResponse, avatarResponse] = await Promise.all([axios.get(`/api/get_live_status?username=${this.startData.name}`), axios.get(`/api/get_avatar?username=${this.startData.name}`)]);\n        this.isUserLive = liveStatusResponse.data.is_live;\n        this.avatarUrl = avatarResponse.data.profile_image_url;\n      } catch (error) {\n        console.error(error);\n        alert('Failed to fetch live status or avatar.');\n      }\n    },\n    async terminateStream(stream_id) {\n      const confirmation = window.confirm('Are you sure you want to terminate this stream?');\n      if (confirmation) {\n        try {\n          const response = await axios.post(`/api/stop?stream_id=${stream_id}`);\n          alert(`Stream terminated: ${response.data.message}`);\n          this.fetchRunningStreams(); // Refresh the list after termination\n        } catch (error) {\n          console.error(error);\n          alert('Failed to terminate the stream.');\n        }\n      }\n    },\n    async confirmTerminateAllStreams() {\n      const confirmation = window.confirm('Are you sure you want to terminate all streams?');\n      if (confirmation) {\n        this.terminateAllStreams();\n      }\n    },\n    async terminateAllStreams() {\n      try {\n        const response = await axios.post('/api/stop_all');\n        alert(`All streams terminated: ${response.data.message}`);\n        this.fetchRunningStreams(); // Refresh the list after termination\n      } catch (error) {\n        console.error(error);\n        alert('Failed to terminate all streams.');\n      }\n    },\n    async fetchRunningStreams() {\n      this.streamsLoading = true; // Show loading state\n      try {\n        // Fetch the list of running and scheduled streams\n        const listResponse = await axios.get('/api/stream_list');\n        const runningStreamIds = listResponse.data.running_streams;\n        const scheduledStreamIds = listResponse.data.scheduled_streams;\n\n        // Fetch details for each running stream ID\n        const runningDetailsPromises = runningStreamIds.map(id => axios.get(`/api/stream_info?stream_id=${id}`));\n        const runningDetailsResponses = await Promise.all(runningDetailsPromises);\n\n        // Extract detailed running stream information\n        this.detailedStreams = await Promise.all(runningDetailsResponses.map(async res => {\n          const stream = res.data;\n          const avatarResponse = await axios.get(`/api/get_avatar?username=${stream.name}`);\n          stream.profile_image_url = avatarResponse.data.profile_image_url;\n          return stream;\n        }));\n\n        // Fetch details for each scheduled stream ID\n        const scheduledDetailsPromises = scheduledStreamIds.map(id => axios.get(`/api/stream_info?stream_id=${id}`));\n        const scheduledDetailsResponses = await Promise.all(scheduledDetailsPromises);\n\n        // Extract detailed scheduled stream information\n        this.scheduledStreams = await Promise.all(scheduledDetailsResponses.map(async res => {\n          const stream = res.data;\n          const avatarResponse = await axios.get(`/api/get_avatar?username=${stream.name}`);\n          stream.profile_image_url = avatarResponse.data.profile_image_url;\n          return stream;\n        }));\n      } catch (error) {\n        console.error(error);\n        alert('Failed to fetch running streams.');\n      } finally {\n        this.streamsLoading = false; // Hide loading state\n      }\n    },\n    handleRunningStreamsClick() {\n      this.currentView = 'list';\n      this.fetchRunningStreams();\n    },\n    async cleanup() {\n      try {\n        const response = await axios.get('/api/cleanup');\n        alert(response.data.result);\n      } catch (error) {\n        console.error(error);\n        alert('Cleanup failed.');\n      }\n    },\n    formatRunningTime(minutes) {\n      const totalSeconds = minutes * 60;\n      const hours = Math.floor(minutes / 60);\n      const remainingMinutes = Math.floor(minutes % 60);\n      const remainingSeconds = Math.round(totalSeconds % 60);\n      if (hours > 0) {\n        return `${hours}h ${remainingMinutes}m ${remainingSeconds}s`;\n      } else {\n        return `${remainingMinutes}m ${remainingSeconds}s`;\n      }\n    }\n  }\n};","map":{"version":3,"names":["StyledButton","axios","components","data","currentView","startData","name","quality","block_ads","append_time","schedule","liveStatusUsername","avatarUrl","isUserLive","runningStreams","detailedStreams","scheduledStreams","streamsLoading","methods","startStream","payload","response","post","alert","message","error","console","fetchLiveStatus","trim","liveStatusResponse","avatarResponse","Promise","all","get","is_live","profile_image_url","terminateStream","stream_id","confirmation","window","confirm","fetchRunningStreams","confirmTerminateAllStreams","terminateAllStreams","listResponse","runningStreamIds","running_streams","scheduledStreamIds","scheduled_streams","runningDetailsPromises","map","id","runningDetailsResponses","res","stream","scheduledDetailsPromises","scheduledDetailsResponses","handleRunningStreamsClick","cleanup","result","formatRunningTime","minutes","totalSeconds","hours","Math","floor","remainingMinutes","remainingSeconds","round"],"sources":["G:\\Informatik\\Projekte\\streamlink_web-ui\\frontend\\src\\components\\StreamlinkUi.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <div class=\"container\">\r\n      <!-- Sidebar -->\r\n      <aside class=\"sidebar\">\r\n        <ul>\r\n          <li :class=\"{ active: currentView === 'start' }\" @click=\"currentView = 'start'\">Start Stream</li>\r\n          <li :class=\"{ active: currentView === 'list' }\" @click=\"handleRunningStreamsClick\">Running Streams</li>\r\n          <li :class=\"{ active: currentView === 'cleanup' }\" @click=\"currentView = 'cleanup'\">Cleanup</li>\r\n        </ul>\r\n      </aside>\r\n\r\n      <!-- Main Content -->\r\n      <main class=\"content\">\r\n        <!-- Start Stream -->\r\n        <div v-if=\"currentView === 'start'\">\r\n          <h2>Start a Stream</h2>\r\n          <div class=\"form-group\">\r\n            <label>Channel Name:</label>\r\n            <input v-model=\"startData.name\" placeholder=\"Enter Channel Name\" />\r\n          </div>\r\n          <!-- New Section: Fetch Live Status -->\r\n          <div class=\"form-group\">\r\n            <StyledButton :clickHandler=\"fetchLiveStatus\" class=\"small-button\">Check Live Status</StyledButton>\r\n          </div>\r\n          <div class=\"avatar-container\" v-if=\"avatarUrl\">\r\n            <img :src=\"avatarUrl\" alt=\"Profile Image\" class=\"profile-image-small\" />\r\n            <div class=\"status-indicator\" :class=\"{ 'status-online': isUserLive, 'status-offline': !isUserLive }\"></div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Quality:</label>\r\n            <select v-model=\"startData.quality\">\r\n              <option value=\"audio_only\">Audio Only</option>\r\n              <option value=\"best\">Best</option>\r\n              <option value=\"720p\">720p</option>\r\n              <option value=\"480p\">480p</option>\r\n              <option value=\"360p\">360p</option>\r\n              <option value=\"160p\">160p</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Filename:</label>\r\n            <input type=\"checkbox\" v-model=\"startData.append_time\" />\r\n            Append datetime to filename\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input type=\"checkbox\" v-model=\"startData.block_ads\" />\r\n            Block ads\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input type=\"checkbox\" v-model=\"startData.schedule\" />\r\n            Schedule\r\n          </div>\r\n          <StyledButton :clickHandler=\"startStream\">Start</StyledButton>\r\n        </div>\r\n\r\n        <!-- Running Streams -->\r\n        <div v-if=\"currentView === 'list'\">\r\n          <!-- ... (Existing code for Running Streams) -->\r\n        </div>\r\n\r\n        <!-- Cleanup -->\r\n        <div v-if=\"currentView === 'cleanup'\">\r\n          <h2>Cleanup</h2>\r\n          <StyledButton :clickHandler=\"cleanup\">Cleanup DB and Logs</StyledButton>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport StyledButton from './StyledButton.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: { StyledButton },\r\n  data() {\r\n    return {\r\n      currentView: 'start', // Default view\r\n      startData: {\r\n        name: '',\r\n        quality: 'best',\r\n        block_ads: true,\r\n        append_time: true,\r\n        schedule: false,\r\n      },\r\n      liveStatusUsername: '', // Input for checking live status\r\n      avatarUrl: null, // URL of the user's avatar\r\n      isUserLive: false, // User live status\r\n      runningStreams: [], // Raw stream IDs from /api/stream_list\r\n      detailedStreams: [], // Detailed data from /api/stream_info\r\n      scheduledStreams: [], // Detailed data for scheduled streams\r\n      streamsLoading: false, // Loading state for the Running Streams view\r\n    };\r\n  },\r\n  methods: {\r\n    async startStream() {\r\n      const payload = {\r\n        name: this.startData.name || '',\r\n        quality: this.startData.quality || 'best',\r\n        block_ads: !!this.startData.block_ads,\r\n        append_time: !!this.startData.append_time, \r\n        schedule: !!this.startData.schedule,\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post('/api/start', payload);\r\n        alert(`Stream started: ${response.data.message}`);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to start the stream.');\r\n      }\r\n    },\r\n\r\n    async fetchLiveStatus() {\r\n      if (!this.startData.name.trim()) {\r\n        alert('Please enter a username.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const [liveStatusResponse, avatarResponse] = await Promise.all([\r\n          axios.get(`/api/get_live_status?username=${this.startData.name}`),\r\n          axios.get(`/api/get_avatar?username=${this.startData.name}`)\r\n        ]);\r\n\r\n        this.isUserLive = liveStatusResponse.data.is_live;\r\n        this.avatarUrl = avatarResponse.data.profile_image_url;\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to fetch live status or avatar.');\r\n      }\r\n    },\r\n\r\n    async terminateStream(stream_id) {\r\n      const confirmation = window.confirm('Are you sure you want to terminate this stream?');\r\n      if (confirmation) {\r\n        try {\r\n          const response = await axios.post(`/api/stop?stream_id=${stream_id}`);\r\n          alert(`Stream terminated: ${response.data.message}`);\r\n          this.fetchRunningStreams(); // Refresh the list after termination\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert('Failed to terminate the stream.');\r\n        }\r\n      }\r\n    },\r\n    async confirmTerminateAllStreams() {\r\n      const confirmation = window.confirm('Are you sure you want to terminate all streams?');\r\n      if (confirmation) {\r\n        this.terminateAllStreams();\r\n      }\r\n    },\r\n    async terminateAllStreams() {\r\n      try {\r\n        const response = await axios.post('/api/stop_all');\r\n        alert(`All streams terminated: ${response.data.message}`);\r\n        this.fetchRunningStreams(); // Refresh the list after termination\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to terminate all streams.');\r\n      }\r\n    },\r\n    async fetchRunningStreams() {\r\n      this.streamsLoading = true; // Show loading state\r\n      try {\r\n        // Fetch the list of running and scheduled streams\r\n        const listResponse = await axios.get('/api/stream_list');\r\n        const runningStreamIds = listResponse.data.running_streams;\r\n        const scheduledStreamIds = listResponse.data.scheduled_streams;\r\n\r\n        // Fetch details for each running stream ID\r\n        const runningDetailsPromises = runningStreamIds.map((id) =>\r\n          axios.get(`/api/stream_info?stream_id=${id}`)\r\n        );\r\n\r\n        const runningDetailsResponses = await Promise.all(runningDetailsPromises);\r\n\r\n        // Extract detailed running stream information\r\n        this.detailedStreams = await Promise.all(\r\n          runningDetailsResponses.map(async (res) => {\r\n            const stream = res.data;\r\n            const avatarResponse = await axios.get(`/api/get_avatar?username=${stream.name}`);\r\n            stream.profile_image_url = avatarResponse.data.profile_image_url;\r\n            return stream;\r\n          })\r\n        );\r\n\r\n        // Fetch details for each scheduled stream ID\r\n        const scheduledDetailsPromises = scheduledStreamIds.map((id) =>\r\n          axios.get(`/api/stream_info?stream_id=${id}`)\r\n        );\r\n\r\n        const scheduledDetailsResponses = await Promise.all(scheduledDetailsPromises);\r\n\r\n        // Extract detailed scheduled stream information\r\n        this.scheduledStreams = await Promise.all(\r\n          scheduledDetailsResponses.map(async (res) => {\r\n            const stream = res.data;\r\n            const avatarResponse = await axios.get(`/api/get_avatar?username=${stream.name}`);\r\n            stream.profile_image_url = avatarResponse.data.profile_image_url;\r\n            return stream;\r\n          })\r\n        );\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to fetch running streams.');\r\n      } finally {\r\n        this.streamsLoading = false; // Hide loading state\r\n      }\r\n    },\r\n    handleRunningStreamsClick() {\r\n      this.currentView = 'list';\r\n      this.fetchRunningStreams();\r\n    },\r\n    async cleanup() {\r\n      try {\r\n        const response = await axios.get('/api/cleanup');\r\n        alert(response.data.result);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Cleanup failed.');\r\n      }\r\n    },\r\n    formatRunningTime(minutes) {\r\n      const totalSeconds = minutes * 60;\r\n      const hours = Math.floor(minutes / 60);\r\n      const remainingMinutes = Math.floor(minutes % 60);\r\n      const remainingSeconds = Math.round(totalSeconds % 60);\r\n\r\n      if (hours > 0) {\r\n        return `${hours}h ${remainingMinutes}m ${remainingSeconds}s`;\r\n      } else {\r\n        return `${remainingMinutes}m ${remainingSeconds}s`;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Colors */\r\n:root {\r\n  --twitch-purple: #9146ff;\r\n  --dark-grey: #2d2d2d;\r\n  --light-grey: #393939;\r\n  --white: #ffffff;\r\n  --hover-grey: #4d4d4d;\r\n  --dark-background: #212121;\r\n  --font-color: #ababab;\r\n}\r\n\r\nbody {\r\n  background-color: var(--dark-background);\r\n}\r\n\r\n/* Overall Layout */\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.sidebar {\r\n  background-color: var(--dark-grey);\r\n  color: var(--white);\r\n  padding: 15px;\r\n  width: 200px;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar li {\r\n  cursor: pointer;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.sidebar li:hover {\r\n  background-color: var(--hover-grey);\r\n}\r\n\r\n.sidebar li.active {\r\n  background-color: var(--twitch-purple);\r\n  color: var(--white);\r\n}\r\n\r\n.content {\r\n  background-color: var(--light-grey);\r\n  color: var(--font-color);\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n\r\n  /* Ensure the content can scroll vertically when needed */\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column; /* Stack children vertically */\r\n  height: calc(100vh - 40px); /* Ensure it fits within viewport */\r\n}\r\n\r\n/* Form Styles */\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\ninput,\r\nselect {\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin-top: 5px;\r\n  background-color: #333;\r\n  border: none;\r\n  color: var(--font-color);\r\n  border-radius: 5px;\r\n}\r\n\r\n/* Stream Boxes */\r\n.stream-box {\r\n  background-color: var(--dark-grey);\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  margin-top: 10px;\r\n  display: flex;\r\n  align-items: center; \r\n  gap: 20px;\r\n  background-color: #333;\r\n  position: relative;\r\n}\r\n\r\n.stream-box .stream-info {\r\n  flex-grow: 1;\r\n}\r\n\r\n.stream-box h3 {\r\n  margin-top: 0;\r\n}\r\n\r\n.stream-box p {\r\n  margin: 5px 0;\r\n}\r\n\r\n.stream-box .profile-image-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 150px;\r\n}\r\n\r\n.stream-box img.profile-image {\r\n  width: 140px;\r\n  height: 140px;\r\n  border-radius: 50%;\r\n  margin-right: 10vw;\r\n  transition: transform 0.2s ease-in-out; \r\n}\r\n\r\n.stream-box img.profile-image:hover {\r\n  transform: scale(1.1); \r\n}\r\n\r\n.stream-box .scheduled-icon-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 10vw;\r\n}\r\n\r\n.stream-box .scheduled-icon {\r\n  font-size: 2.5vw;\r\n  color: var(--twitch-purple);\r\n  transition: transform 0.2s ease-in-out;\r\n}\r\n\r\n.stream-box .scheduled-icon:hover {\r\n  transform: scale(1.1); \r\n}\r\n\r\n.stream-box .scheduled-icon-container.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n.streams-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));\r\n  gap: 20px;\r\n\r\n  /* Ensure grid scales properly */\r\n  flex-grow: 1; \r\n  overflow-y: auto; /* Enable vertical scroll if the grid overflows */\r\n  max-height: calc(100vh - 140px); /* Adjust for header/buttons */\r\n}\r\n\r\nbutton {\r\n  width: auto;\r\n  padding: 8px 16px;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n/* Button Styles */\r\n.terminate-btn {\r\n  background-color: transparent;\r\n  color: #d9534f;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.terminate-btn:hover {\r\n  color: red;\r\n}\r\n\r\n.terminate-btn:hover::after {\r\n  position: absolute;\r\n  top: -25px;\r\n  right: 0;\r\n  background-color: var(--dark-grey);\r\n  color: var(--white);\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n}\r\n/* Terminate All Button */\r\n.terminate-all-btn {\r\n  background-color: #d9534f;\r\n  color: var(--white);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: auto;\r\n  transition: background-color 0.3s ease;\r\n  position: fixed;\r\n  bottom: 10px;\r\n  right: 10px;\r\n}\r\n\r\n.terminate-all-btn:hover {\r\n  background-color: red;\r\n}\r\n\r\n/* Smaller Button */\r\n.small-button {\r\n  padding: 5px 10px;\r\n}\r\n\r\n/* Avatar Container */\r\n.avatar-container {\r\n  position: relative;\r\n  display: inline-block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.profile-image-small {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 50%;\r\n  border: 2px solid var(--white);\r\n}\r\n\r\n/* Status Indicator */\r\n.status-indicator {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  border: 2px solid var(--dark-grey);\r\n}\r\n\r\n.status-online {\r\n  background-color: #4caf50; /* Green for online */\r\n}\r\n\r\n.status-offline {\r\n  background-color: #d9534f; /* Red for offline */\r\n}\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}