{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      currentView: \"start\",\n      startData: {\n        name: \"\",\n        output_dir: \"\",\n        quality: \"audio_only\",\n        block_ads: false\n      },\n      streamId: \"\",\n      runningStreams: []\n    };\n  },\n  methods: {\n    async startStream() {\n      try {\n        const response = await axios.post(\"/api/start/\", this.startData);\n        alert(`Stream started: ${response.data.message}`);\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to start the stream.\");\n      }\n    },\n    async stopStream() {\n      try {\n        const response = await axios.post(\"/api/stop/\", {\n          stream_id: this.streamId\n        });\n        alert(response.data.message);\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to stop the stream.\");\n      }\n    },\n    async fetchRunningStreams() {\n      try {\n        const response = await axios.get(\"/api/stream_list/\");\n        this.runningStreams = response.data.running_streams;\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to fetch running streams.\");\n      }\n    },\n    async cleanup() {\n      try {\n        const response = await axios.get(\"/api/cleanup/\");\n        alert(response.data.result);\n      } catch (error) {\n        console.error(error);\n        alert(\"Cleanup failed.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","currentView","startData","name","output_dir","quality","block_ads","streamId","runningStreams","methods","startStream","response","post","alert","message","error","console","stopStream","stream_id","fetchRunningStreams","get","running_streams","cleanup","result"],"sources":["G:\\Informatik\\Projekte\\streamlink_web-ui\\frontend\\src\\components\\StreamlinkUi.vue"],"sourcesContent":["<template>\r\n    <div id=\"app\">\r\n      <div class=\"sidebar\">\r\n        <h2>Streamlink-UI</h2>\r\n        <ul>\r\n          <li @click=\"currentView = 'start'\">Start Stream</li>\r\n          <li @click=\"currentView = 'stop'\">Stop Stream</li>\r\n          <li @click=\"currentView = 'list'\">Running Streams</li>\r\n          <li @click=\"currentView = 'cleanup'\">Cleanup</li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"main-content\">\r\n        <div v-if=\"currentView === 'start'\">\r\n          <h3>Start a Stream</h3>\r\n          <input v-model=\"startData.name\" placeholder=\"Channel Name\" />\r\n          <input v-model=\"startData.output_dir\" placeholder=\"Output Directory\" />\r\n          <select v-model=\"startData.quality\">\r\n            <option value=\"audio_only\">Audio Only</option>\r\n            <option value=\"best\">Best</option>\r\n          </select>\r\n          <input type=\"checkbox\" v-model=\"startData.block_ads\" /> Block Ads\r\n          <button @click=\"startStream\">Start</button>\r\n        </div>\r\n        <div v-if=\"currentView === 'stop'\">\r\n          <h3>Stop a Stream</h3>\r\n          <input v-model=\"streamId\" placeholder=\"Stream ID\" />\r\n          <button @click=\"stopStream\">Stop</button>\r\n        </div>\r\n        <div v-if=\"currentView === 'list'\">\r\n          <h3>Running Streams</h3>\r\n          <button @click=\"fetchRunningStreams\">Refresh</button>\r\n          <ul>\r\n            <li v-for=\"stream in runningStreams\" :key=\"stream\">{{ stream }}</li>\r\n          </ul>\r\n        </div>\r\n        <div v-if=\"currentView === 'cleanup'\">\r\n          <h3>Cleanup</h3>\r\n          <button @click=\"cleanup\">Cleanup DB and Logs</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from \"axios\";\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        currentView: \"start\",\r\n        startData: {\r\n          name: \"\",\r\n          output_dir: \"\",\r\n          quality: \"audio_only\",\r\n          block_ads: false,\r\n        },\r\n        streamId: \"\",\r\n        runningStreams: [],\r\n      };\r\n    },\r\n    methods: {\r\n      async startStream() {\r\n        try {\r\n          const response = await axios.post(\"/api/start/\", this.startData);\r\n          alert(`Stream started: ${response.data.message}`);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to start the stream.\");\r\n        }\r\n      },\r\n      async stopStream() {\r\n        try {\r\n          const response = await axios.post(\"/api/stop/\", { stream_id: this.streamId });\r\n          alert(response.data.message);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to stop the stream.\");\r\n        }\r\n      },\r\n      async fetchRunningStreams() {\r\n        try {\r\n          const response = await axios.get(\"/api/stream_list/\");\r\n          this.runningStreams = response.data.running_streams;\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to fetch running streams.\");\r\n        }\r\n      },\r\n      async cleanup() {\r\n        try {\r\n          const response = await axios.get(\"/api/cleanup/\");\r\n          alert(response.data.result);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Cleanup failed.\");\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #app {\r\n    display: flex;\r\n  }\r\n  \r\n  .sidebar {\r\n    width: 200px;\r\n    background: #2d3748;\r\n    color: white;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .sidebar ul {\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .sidebar li {\r\n    cursor: pointer;\r\n    margin: 10px 0;\r\n  }\r\n  \r\n  .main-content {\r\n    flex: 1;\r\n    padding: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AA4CE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,OAAO;MACpBC,SAAS,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,UAAU,EAAE,EAAE;QACdC,OAAO,EAAE,YAAY;QACrBC,SAAS,EAAE;MACb,CAAC;MACDC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMZ,KAAK,CAACa,IAAI,CAAC,aAAa,EAAE,IAAI,CAACV,SAAS,CAAC;QAChEW,KAAK,CAAC,mBAAmBF,QAAQ,CAACX,IAAI,CAACc,OAAO,EAAE,CAAC;MACnD,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAAC,6BAA6B,CAAC;MACtC;IACF,CAAC;IACD,MAAMI,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMN,QAAO,GAAI,MAAMZ,KAAK,CAACa,IAAI,CAAC,YAAY,EAAE;UAAEM,SAAS,EAAE,IAAI,CAACX;QAAS,CAAC,CAAC;QAC7EM,KAAK,CAACF,QAAQ,CAACX,IAAI,CAACc,OAAO,CAAC;MAC9B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAAC,4BAA4B,CAAC;MACrC;IACF,CAAC;IACD,MAAMM,mBAAmBA,CAAA,EAAG;MAC1B,IAAI;QACF,MAAMR,QAAO,GAAI,MAAMZ,KAAK,CAACqB,GAAG,CAAC,mBAAmB,CAAC;QACrD,IAAI,CAACZ,cAAa,GAAIG,QAAQ,CAACX,IAAI,CAACqB,eAAe;MACrD,EAAE,OAAON,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAAC,kCAAkC,CAAC;MAC3C;IACF,CAAC;IACD,MAAMS,OAAOA,CAAA,EAAG;MACd,IAAI;QACF,MAAMX,QAAO,GAAI,MAAMZ,KAAK,CAACqB,GAAG,CAAC,eAAe,CAAC;QACjDP,KAAK,CAACF,QAAQ,CAACX,IAAI,CAACuB,MAAM,CAAC;MAC7B,EAAE,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAAC,iBAAiB,CAAC;MAC1B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}