{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      currentView: \"start\",\n      // Default view\n      startData: {\n        name: \"\",\n        quality: \"audio_only\",\n        customPath: \"\",\n        blockAds: false\n      },\n      useDefaultFilename: true,\n      includeDate: false,\n      streamId: \"\",\n      runningStreams: [],\n      // Raw stream IDs from /api/stream_list\n      detailedStreams: [],\n      // Detailed data from /api/stream_info\n      streamsLoading: false // Loading state for the Running Streams view\n    };\n  },\n  methods: {\n    async startStream() {\n      const payload = {\n        ...this.startData,\n        customPath: this.useDefaultFilename ? null : this.includeDate ? `${this.startData.customPath}_DATE` : this.startData.customPath\n      };\n      try {\n        const response = await axios.post(\"/api/start\", payload);\n        alert(`Stream started: ${response.data.message}`);\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to start the stream.\");\n      }\n    },\n    async stopStream() {\n      try {\n        const response = await axios.post(\"/api/stop\", {\n          stream_id: this.streamId\n        });\n        alert(response.data.message);\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to stop the stream.\");\n      }\n    },\n    async fetchRunningStreams() {\n      this.streamsLoading = true; // Show loading state\n      try {\n        // Fetch the list of running streams\n        const listResponse = await axios.get(\"/api/stream_list\");\n        const streamIds = listResponse.data.running_streams;\n\n        // Fetch details for each stream ID\n        const detailsPromises = streamIds.map(id => axios.get(`/api/stream_info?stream-id=${id}`));\n        const detailsResponses = await Promise.all(detailsPromises);\n\n        // Extract detailed stream information\n        this.detailedStreams = detailsResponses.map(res => res.data);\n      } catch (error) {\n        console.error(error);\n        alert(\"Failed to fetch running streams.\");\n      } finally {\n        this.streamsLoading = false; // Hide loading state\n      }\n    },\n    async cleanup() {\n      try {\n        const response = await axios.get(\"/api/cleanup\");\n        alert(response.data.result);\n      } catch (error) {\n        console.error(error);\n        alert(\"Cleanup failed.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","currentView","startData","name","quality","customPath","blockAds","useDefaultFilename","includeDate","streamId","runningStreams","detailedStreams","streamsLoading","methods","startStream","payload","response","post","alert","message","error","console","stopStream","stream_id","fetchRunningStreams","listResponse","get","streamIds","running_streams","detailsPromises","map","id","detailsResponses","Promise","all","res","cleanup","result"],"sources":["G:\\Informatik\\Projekte\\streamlink_web-ui\\frontend\\src\\components\\StreamlinkUi.vue"],"sourcesContent":["<template>\r\n    <div id=\"app\">\r\n      <div class=\"container\">\r\n        <!-- Sidebar -->\r\n        <aside class=\"sidebar\">\r\n          <ul>\r\n            <li :class=\"{ active: currentView === 'start' }\" @click=\"currentView = 'start'\">Start Stream</li>\r\n            <li :class=\"{ active: currentView === 'stop' }\" @click=\"currentView = 'stop'\">Stop Stream</li>\r\n            <li :class=\"{ active: currentView === 'list' }\" @click=\"currentView = 'list'\">Running Streams</li>\r\n            <li :class=\"{ active: currentView === 'cleanup' }\" @click=\"currentView = 'cleanup'\">Cleanup</li>\r\n          </ul>\r\n        </aside>\r\n  \r\n        <!-- Main Content -->\r\n        <main class=\"content\">\r\n          <!-- Start Stream -->\r\n          <div v-if=\"currentView === 'start'\">\r\n            <h2>Start a Stream</h2>\r\n            <div class=\"form-group\">\r\n              <label>Channel Name:</label>\r\n              <input v-model=\"startData.name\" placeholder=\"Enter Channel Name\" />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Quality:</label>\r\n              <select v-model=\"startData.quality\">\r\n                <option value=\"audio_only\">Audio Only</option>\r\n                <option value=\"best\">Best</option>\r\n                <option value=\"720p\">720p</option>\r\n                <option value=\"480p\">480p</option>\r\n                <option value=\"360p\">360p</option>\r\n                <option value=\"160p\">160p</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Filename:</label>\r\n              <input type=\"checkbox\" v-model=\"useDefaultFilename\" />\r\n              Use default filename\r\n              <div v-if=\"!useDefaultFilename\" class=\"conditional-options\">\r\n                <input type=\"checkbox\" v-model=\"includeDate\" />\r\n                Include date in filename\r\n                <input v-model=\"startData.customPath\" placeholder=\"Enter custom filename or path\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <input type=\"checkbox\" v-model=\"startData.blockAds\" />\r\n              Block ads\r\n            </div>\r\n            <button @click=\"startStream\">Start</button>\r\n          </div>\r\n  \r\n          <!-- Stop Stream -->\r\n          <div v-if=\"currentView === 'stop'\">\r\n            <h2>Stop a Stream</h2>\r\n            <div class=\"form-group\">\r\n              <label>Stream ID:</label>\r\n              <input v-model=\"streamId\" placeholder=\"Enter Stream ID\" />\r\n            </div>\r\n            <button @click=\"stopStream\">Stop</button>\r\n          </div>\r\n  \r\n          <!-- Running Streams -->\r\n          <div v-if=\"currentView === 'list'\">\r\n            <h2>Running Streams</h2>\r\n            <button @click=\"fetchRunningStreams\">Refresh</button>\r\n            <div v-if=\"streamsLoading\">Loading streams...</div>\r\n            <div v-else>\r\n              <ul>\r\n                <li v-for=\"stream in detailedStreams\" :key=\"stream.stream_id\">\r\n                  <h3>{{ stream.name }}</h3>\r\n                  <p><strong>Stream ID:</strong> {{ stream.stream_id }}</p>\r\n                  <p>\r\n                    <strong>URL:</strong>\r\n                    <a :href=\"stream.url\" target=\"_blank\">{{ stream.url }}</a>\r\n                  </p>\r\n                  <p><strong>Quality:</strong> {{ stream.quality }}</p>\r\n                  <p><strong>Running Since:</strong> {{ stream.running_since }} minutes</p>\r\n                  <p><strong>Filename:</strong> {{ stream.filename }}</p>\r\n                  <p><strong>Output Directory:</strong> {{ stream.output_dir }}</p>\r\n                  <p><strong>Block Ads:</strong> {{ stream.block_ads ? \"Yes\" : \"No\" }}</p>\r\n                  <p><strong>Status:</strong> {{ stream.running ? \"Running\" : \"Stopped\" }}</p>\r\n                  <hr />\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n  \r\n          <!-- Cleanup -->\r\n          <div v-if=\"currentView === 'cleanup'\">\r\n            <h2>Cleanup</h2>\r\n            <button @click=\"cleanup\">Cleanup DB and Logs</button>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from \"axios\";\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        currentView: \"start\", // Default view\r\n        startData: {\r\n          name: \"\",\r\n          quality: \"audio_only\",\r\n          customPath: \"\",\r\n          blockAds: false,\r\n        },\r\n        useDefaultFilename: true,\r\n        includeDate: false,\r\n        streamId: \"\",\r\n        runningStreams: [], // Raw stream IDs from /api/stream_list\r\n        detailedStreams: [], // Detailed data from /api/stream_info\r\n        streamsLoading: false, // Loading state for the Running Streams view\r\n      };\r\n    },\r\n    methods: {\r\n      async startStream() {\r\n        const payload = {\r\n          ...this.startData,\r\n          customPath: this.useDefaultFilename\r\n            ? null\r\n            : this.includeDate\r\n            ? `${this.startData.customPath}_DATE`\r\n            : this.startData.customPath,\r\n        };\r\n        try {\r\n          const response = await axios.post(\"/api/start\", payload);\r\n          alert(`Stream started: ${response.data.message}`);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to start the stream.\");\r\n        }\r\n      },\r\n      async stopStream() {\r\n        try {\r\n          const response = await axios.post(\"/api/stop\", { stream_id: this.streamId });\r\n          alert(response.data.message);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to stop the stream.\");\r\n        }\r\n      },\r\n      async fetchRunningStreams() {\r\n        this.streamsLoading = true; // Show loading state\r\n        try {\r\n          // Fetch the list of running streams\r\n          const listResponse = await axios.get(\"/api/stream_list\");\r\n          const streamIds = listResponse.data.running_streams;\r\n  \r\n          // Fetch details for each stream ID\r\n          const detailsPromises = streamIds.map((id) =>\r\n            axios.get(`/api/stream_info?stream-id=${id}`)\r\n          );\r\n  \r\n          const detailsResponses = await Promise.all(detailsPromises);\r\n  \r\n          // Extract detailed stream information\r\n          this.detailedStreams = detailsResponses.map((res) => res.data);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Failed to fetch running streams.\");\r\n        } finally {\r\n          this.streamsLoading = false; // Hide loading state\r\n        }\r\n      },\r\n      async cleanup() {\r\n        try {\r\n          const response = await axios.get(\"/api/cleanup\");\r\n          alert(response.data.result);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert(\"Cleanup failed.\");\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Colors */\r\n  :root {\r\n    --twitch-purple: #9146ff;\r\n    --dark-grey: #2d2d2d;\r\n    --light-grey: #393939;\r\n    --white: #ffffff;\r\n    --hover-grey: #4d4d4d;\r\n  }\r\n  \r\n  /* Overall Layout */\r\n  .container {\r\n    display: flex;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .sidebar {\r\n    background-color: var(--dark-grey);\r\n    color: var(--white);\r\n    padding: 15px;\r\n    width: 200px;\r\n  }\r\n  \r\n  .sidebar ul {\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  .sidebar li {\r\n    cursor: pointer;\r\n    margin: 10px 0;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    transition: background-color 0.3s ease;\r\n  }\r\n  \r\n  .sidebar li:hover {\r\n    background-color: var(--hover-grey);\r\n  }\r\n  \r\n  .sidebar li.active {\r\n    background-color: var(--twitch-purple);\r\n    color: var(--white);\r\n  }\r\n  \r\n  .content {\r\n    background-color: var(--light-grey);\r\n    color: var(--white);\r\n    flex-grow: 1;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  /* Form Styles */\r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  input,\r\n  select,\r\n  button {\r\n    display: block;\r\n    width: 100%;\r\n    padding: 10px;\r\n    margin-top: 5px;\r\n    background-color: var(--white);\r\n    color: var(--dark-grey);\r\n    border: none;\r\n    border-radius: 5px;\r\n    transition: background-color 0.3s ease;\r\n  }\r\n  \r\n  button {\r\n    background-color: var(--twitch-purple);\r\n    color: var(--white);\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #772ce8;\r\n  }\r\n  \r\n  input:hover,\r\n  select:hover {\r\n    background-color: var(--hover-grey);\r\n    color: var(--white);\r\n  }\r\n  \r\n  .conditional-options {\r\n    margin-top: 10px;\r\n    padding-left: 20px;\r\n  }\r\n  \r\n  /* Running Streams */\r\n  ul {\r\n    list-style: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  li {\r\n    background-color: var(--dark-grey);\r\n    padding: 15px;\r\n    margin-bottom: 10px;\r\n    border-radius: 5px;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n  }\r\n  \r\n  li h3 {\r\n    margin: 0;\r\n    color: var(--twitch-purple);\r\n  }\r\n  \r\n  li p {\r\n    margin: 5px 0;\r\n  }\r\n  \r\n  li a {\r\n    color: var(--twitch-purple);\r\n    text-decoration: none;\r\n  }\r\n  \r\n  li a:hover {\r\n    text-decoration: underline;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}