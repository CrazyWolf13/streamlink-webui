{"ast":null,"code":"import StyledButton from './StyledButton.vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    StyledButton\n  },\n  data() {\n    return {\n      currentView: 'start',\n      // Default view\n      startData: {\n        name: '',\n        quality: 'best',\n        customFilename: '',\n        // Renamed from customPath\n        block_ads: true\n      },\n      useDefaultFilename: true,\n      appendTime: false // Renamed from append_time\n    };\n  },\n  methods: {\n    async startStream() {\n      const payload = {\n        name: this.startData.name,\n        quality: this.startData.quality,\n        block_ads: this.startData.block_ads,\n        ...(this.useDefaultFilename ? {} : {\n          filename: this.startData.customFilename || null,\n          append_time: this.appendTime\n        })\n      };\n      try {\n        const response = await axios.post('/api/start', payload);\n        alert(`Stream started: ${response.data.message}`);\n      } catch (error) {\n        console.error(error);\n        alert('Failed to start the stream.');\n      }\n    },\n    async fetchRunningStreams() {\n      this.streamsLoading = true; // Show loading state\n      try {\n        const response = await axios.get('/api/stream_list');\n        this.detailedStreams = response.data.running_streams;\n      } catch (error) {\n        console.error(error);\n        alert('Failed to fetch running streams.');\n      } finally {\n        this.streamsLoading = false; // Hide loading state\n      }\n    },\n    async cleanup() {\n      try {\n        const response = await axios.get('/api/cleanup');\n        alert(response.data.result);\n      } catch (error) {\n        console.error(error);\n        alert('Cleanup failed.');\n      }\n    },\n    formatRunningTime(minutes) {\n      const hours = Math.floor(minutes / 60);\n      const remainingMinutes = Math.floor(minutes % 60);\n      const remainingSeconds = Math.round(minutes * 60 % 60);\n      if (hours > 0) {\n        return `${hours}h ${remainingMinutes}m ${remainingSeconds}s`;\n      } else {\n        return `${remainingMinutes}m ${remainingSeconds}s`;\n      }\n    }\n  }\n};","map":{"version":3,"names":["StyledButton","axios","components","data","currentView","startData","name","quality","customFilename","block_ads","useDefaultFilename","appendTime","methods","startStream","payload","filename","append_time","response","post","alert","message","error","console","fetchRunningStreams","streamsLoading","get","detailedStreams","running_streams","cleanup","result","formatRunningTime","minutes","hours","Math","floor","remainingMinutes","remainingSeconds","round"],"sources":["G:\\Informatik\\Projekte\\streamlink_web-ui\\frontend\\src\\components\\StreamlinkUi.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <div class=\"container\">\r\n      <!-- Sidebar -->\r\n      <aside class=\"sidebar\">\r\n        <ul>\r\n          <li :class=\"{ active: currentView === 'start' }\" @click=\"currentView = 'start'\">Start Stream</li>\r\n          <li :class=\"{ active: currentView === 'list' }\" @click=\"handleRunningStreamsClick\">Running Streams</li>\r\n          <li :class=\"{ active: currentView === 'cleanup' }\" @click=\"currentView = 'cleanup'\">Cleanup</li>\r\n        </ul>\r\n      </aside>\r\n\r\n      <!-- Main Content -->\r\n      <main class=\"content\">\r\n        <!-- Start Stream -->\r\n        <div v-if=\"currentView === 'start'\">\r\n          <h2>Start a Stream</h2>\r\n          <div class=\"form-group\">\r\n            <label>Channel Name:</label>\r\n            <input v-model=\"startData.name\" placeholder=\"Enter Channel Name\" />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Quality:</label>\r\n            <select v-model=\"startData.quality\">\r\n              <option value=\"audio_only\">Audio Only</option>\r\n              <option value=\"best\">Best</option>\r\n              <option value=\"720p\">720p</option>\r\n              <option value=\"480p\">480p</option>\r\n              <option value=\"360p\">360p</option>\r\n              <option value=\"160p\">160p</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>Filename:</label>\r\n            <input type=\"checkbox\" v-model=\"useDefaultFilename\" />\r\n            Use default filename\r\n            <div v-if=\"!useDefaultFilename\" class=\"conditional-options\">\r\n              <input type=\"checkbox\" v-model=\"appendTime\" />\r\n              Append date to filename\r\n              <input v-model=\"startData.customFilename\" placeholder=\"Enter custom filename or path\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input type=\"checkbox\" v-model=\"startData.block_ads\" />\r\n            Block ads\r\n          </div>\r\n          <StyledButton :clickHandler=\"startStream\">Start</StyledButton>\r\n        </div>\r\n\r\n        <!-- Running Streams -->\r\n        <div v-if=\"currentView === 'list'\">\r\n          <h2>Running Streams</h2>\r\n          <StyledButton :clickHandler=\"fetchRunningStreams\" class=\"refresh-btn\">Refresh</StyledButton>\r\n          <div v-if=\"streamsLoading\">Loading streams...</div>\r\n          <div v-else>\r\n            <div class=\"streams-container\">\r\n              <div v-for=\"stream in detailedStreams\" :key=\"stream.stream_id\" class=\"stream-box\">\r\n                <div class=\"scheduled-icon-container invisible\">\r\n                  <i class=\"fas fa-hourglass-half scheduled-icon\"></i>\r\n                </div>\r\n                <div class=\"stream-info\">\r\n                  <h3>\r\n                    <a :href=\"stream.url\" target=\"_blank\">{{ stream.name }}</a>\r\n                  </h3>\r\n                  <p><strong>Stream ID:</strong> {{ stream.stream_id }}</p>\r\n                  <p><strong>Quality:</strong> {{ stream.quality }}</p>\r\n                  <p><strong>Running Since:</strong> {{ formatRunningTime(stream.running_since) }}</p>\r\n                  <p><strong>Filename:</strong> {{ stream.filename }}</p>\r\n                  <p><strong>Output Directory:</strong> {{ stream.output_dir }}</p>\r\n                  <p><strong>Block Ads:</strong> {{ stream.block_ads ? \"Yes\" : \"No\" }}</p>\r\n                  <p><strong>Status:</strong> {{ stream.running ? \"Running\" : \"Stopped\" }}</p>\r\n                </div>\r\n                <div class=\"profile-image-container\">\r\n                  <a :href=\"stream.url\" target=\"_blank\">\r\n                    <img :src=\"stream.profile_image_url\" alt=\"Profile Image\" class=\"profile-image\" />\r\n                  </a>\r\n                </div>\r\n                <button @click=\"terminateStream(stream.stream_id)\" class=\"terminate-btn\" title=\"Terminate\">\r\n                  <i class=\"fas fa-trash\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <button @click=\"confirmTerminateAllStreams\" class=\"terminate-all-btn\" title=\"Terminate All\">\r\n            <i class=\"fas fa-trash\"></i>\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Cleanup -->\r\n        <div v-if=\"currentView === 'cleanup'\">\r\n          <h2>Cleanup</h2>\r\n          <StyledButton :clickHandler=\"cleanup\">Cleanup DB and Logs</StyledButton>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport StyledButton from './StyledButton.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: { StyledButton },\r\n  data() {\r\n    return {\r\n      currentView: 'start', // Default view\r\n      startData: {\r\n        name: '',\r\n        quality: 'best',\r\n        customFilename: '', // Renamed from customPath\r\n        block_ads: true,\r\n      },\r\n      useDefaultFilename: true,\r\n      appendTime: false, // Renamed from append_time\r\n    };\r\n  },\r\n  methods: {\r\n    async startStream() {\r\n      const payload = {\r\n        name: this.startData.name,\r\n        quality: this.startData.quality,\r\n        block_ads: this.startData.block_ads,\r\n        ...(this.useDefaultFilename\r\n          ? {}\r\n          : {\r\n              filename: this.startData.customFilename || null,\r\n              append_time: this.appendTime,\r\n            }),\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post('/api/start', payload);\r\n        alert(`Stream started: ${response.data.message}`);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to start the stream.');\r\n      }\r\n    },\r\n    async fetchRunningStreams() {\r\n      this.streamsLoading = true; // Show loading state\r\n      try {\r\n        const response = await axios.get('/api/stream_list');\r\n        this.detailedStreams = response.data.running_streams;\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Failed to fetch running streams.');\r\n      } finally {\r\n        this.streamsLoading = false; // Hide loading state\r\n      }\r\n    },\r\n    async cleanup() {\r\n      try {\r\n        const response = await axios.get('/api/cleanup');\r\n        alert(response.data.result);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Cleanup failed.');\r\n      }\r\n    },\r\n    formatRunningTime(minutes) {\r\n      const hours = Math.floor(minutes / 60);\r\n      const remainingMinutes = Math.floor(minutes % 60);\r\n      const remainingSeconds = Math.round((minutes * 60) % 60);\r\n\r\n      if (hours > 0) {\r\n        return `${hours}h ${remainingMinutes}m ${remainingSeconds}s`;\r\n      } else {\r\n        return `${remainingMinutes}m ${remainingSeconds}s`;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Colors */\r\n:root {\r\n  --twitch-purple: #9146ff;\r\n  --dark-grey: #2d2d2d;\r\n  --light-grey: #393939;\r\n  --white: #ffffff;\r\n  --hover-grey: #4d4d4d;\r\n  --dark-background: #212121;\r\n  --font-color: #ababab;\r\n}\r\n\r\nbody {\r\n  background-color: var(--dark-background);\r\n}\r\n\r\n/* Overall Layout */\r\n.container {\r\n  display: flex;\r\n  height: 100vh;\r\n}\r\n\r\n.sidebar {\r\n  background-color: var(--dark-grey);\r\n  color: var(--white);\r\n  padding: 15px;\r\n  width: 200px;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.sidebar li {\r\n  cursor: pointer;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.sidebar li:hover {\r\n  background-color: var(--hover-grey);\r\n}\r\n\r\n.sidebar li.active {\r\n  background-color: var(--twitch-purple);\r\n  color: var(--white);\r\n}\r\n\r\n.content {\r\n  background-color: var(--light-grey);\r\n  color: var(--font-color);\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\r\n\r\n  /* Ensure the content can scroll vertically when needed */\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column; /* Stack children vertically */\r\n  height: calc(100vh - 40px); /* Ensure it fits within viewport */\r\n}\r\n\r\n/* Form Styles */\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\ninput,\r\nselect {\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin-top: 5px;\r\n  background-color: #333;\r\n  border: none;\r\n  color: var(--font-color);\r\n  border-radius: 5px;\r\n}\r\n\r\n/* Stream Boxes */\r\n.stream-box {\r\n  background-color: var(--dark-grey);\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  margin-top: 10px;\r\n  display: flex;\r\n  align-items: center; \r\n  gap: 20px;\r\n  background-color: #333;\r\n  position: relative;\r\n}\r\n\r\n.stream-box .stream-info {\r\n  flex-grow: 1;\r\n}\r\n\r\n.stream-box h3 {\r\n  margin-top: 0;\r\n}\r\n\r\n.stream-box p {\r\n  margin: 5px 0;\r\n}\r\n\r\n.stream-box .profile-image-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 150px;\r\n}\r\n\r\n.stream-box img.profile-image {\r\n  width: 140px;\r\n  height: 140px;\r\n  border-radius: 50%;\r\n  margin-right: 10vw;\r\n  transition: transform 0.2s ease-in-out; \r\n}\r\n\r\n.stream-box img.profile-image:hover {\r\n  transform: scale(1.1); \r\n}\r\n\r\n.stream-box .scheduled-icon-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 10vw;\r\n}\r\n\r\n.stream-box .scheduled-icon {\r\n  font-size: 2.5vw;\r\n  color: var(--twitch-purple);\r\n  transition: transform 0.2s ease-in-out;\r\n}\r\n\r\n.stream-box .scheduled-icon:hover {\r\n  transform: scale(1.1); \r\n}\r\n\r\n.stream-box .scheduled-icon-container.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n.streams-container {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));\r\n  gap: 20px;\r\n\r\n  /* Ensure grid scales properly */\r\n  flex-grow: 1; \r\n  overflow-y: auto; /* Enable vertical scroll if the grid overflows */\r\n  max-height: calc(100vh - 140px); /* Adjust for header/buttons */\r\n}\r\n\r\nbutton {\r\n  width: auto;\r\n  padding: 8px 16px;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton i {\r\n  font-size: 18px;\r\n}\r\n\r\n/* Button Styles */\r\n.terminate-btn {\r\n  background-color: transparent;\r\n  color: #d9534f;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.terminate-btn:hover {\r\n  color: red;\r\n}\r\n\r\n.terminate-btn:hover::after {\r\n  position: absolute;\r\n  top: -25px;\r\n  right: 0;\r\n  background-color: var(--dark-grey);\r\n  color: var(--white);\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n}\r\n/* Terminate All Button */\r\n.terminate-all-btn {\r\n  background-color: #d9534f;\r\n  color: var(--white);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  width: auto;\r\n  transition: background-color 0.3s ease;\r\n  position: fixed;\r\n  bottom: 10px;\r\n  right: 10px;\r\n}\r\n\r\n.terminate-all-btn:hover {\r\n  background-color: red;\r\n}\r\n  </style>"],"mappings":"AAmGA,OAAOA,YAAW,MAAO,oBAAoB;AAC7C,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,UAAU,EAAE;IAAEF;EAAa,CAAC;EAC5BG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,OAAO;MAAE;MACtBC,SAAS,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,EAAE;QAAE;QACpBC,SAAS,EAAE;MACb,CAAC;MACDC,kBAAkB,EAAE,IAAI;MACxBC,UAAU,EAAE,KAAK,CAAE;IACrB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,MAAMC,OAAM,GAAI;QACdR,IAAI,EAAE,IAAI,CAACD,SAAS,CAACC,IAAI;QACzBC,OAAO,EAAE,IAAI,CAACF,SAAS,CAACE,OAAO;QAC/BE,SAAS,EAAE,IAAI,CAACJ,SAAS,CAACI,SAAS;QACnC,IAAI,IAAI,CAACC,kBAAiB,GACtB,CAAC,IACD;UACEK,QAAQ,EAAE,IAAI,CAACV,SAAS,CAACG,cAAa,IAAK,IAAI;UAC/CQ,WAAW,EAAE,IAAI,CAACL;QACpB,CAAC;MACP,CAAC;MAED,IAAI;QACF,MAAMM,QAAO,GAAI,MAAMhB,KAAK,CAACiB,IAAI,CAAC,YAAY,EAAEJ,OAAO,CAAC;QACxDK,KAAK,CAAC,mBAAmBF,QAAQ,CAACd,IAAI,CAACiB,OAAO,EAAE,CAAC;MACnD,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAAC,6BAA6B,CAAC;MACtC;IACF,CAAC;IACD,MAAMI,mBAAmBA,CAAA,EAAG;MAC1B,IAAI,CAACC,cAAa,GAAI,IAAI,EAAE;MAC5B,IAAI;QACF,MAAMP,QAAO,GAAI,MAAMhB,KAAK,CAACwB,GAAG,CAAC,kBAAkB,CAAC;QACpD,IAAI,CAACC,eAAc,GAAIT,QAAQ,CAACd,IAAI,CAACwB,eAAe;MACtD,EAAE,OAAON,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAAC,kCAAkC,CAAC;MAC3C,UAAU;QACR,IAAI,CAACK,cAAa,GAAI,KAAK,EAAE;MAC/B;IACF,CAAC;IACD,MAAMI,OAAOA,CAAA,EAAG;MACd,IAAI;QACF,MAAMX,QAAO,GAAI,MAAMhB,KAAK,CAACwB,GAAG,CAAC,cAAc,CAAC;QAChDN,KAAK,CAACF,QAAQ,CAACd,IAAI,CAAC0B,MAAM,CAAC;MAC7B,EAAE,OAAOR,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAAC,iBAAiB,CAAC;MAC1B;IACF,CAAC;IACDW,iBAAiBA,CAACC,OAAO,EAAE;MACzB,MAAMC,KAAI,GAAIC,IAAI,CAACC,KAAK,CAACH,OAAM,GAAI,EAAE,CAAC;MACtC,MAAMI,gBAAe,GAAIF,IAAI,CAACC,KAAK,CAACH,OAAM,GAAI,EAAE,CAAC;MACjD,MAAMK,gBAAe,GAAIH,IAAI,CAACI,KAAK,CAAEN,OAAM,GAAI,EAAE,GAAI,EAAE,CAAC;MAExD,IAAIC,KAAI,GAAI,CAAC,EAAE;QACb,OAAO,GAAGA,KAAK,KAAKG,gBAAgB,KAAKC,gBAAgB,GAAG;MAC9D,OAAO;QACL,OAAO,GAAGD,gBAAgB,KAAKC,gBAAgB,GAAG;MACpD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}